// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement()) 
  name      String
  cellphone String   @unique
  email     String?   @unique
  password  String
  role      Role     @default(EMPLOYEE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parkingLots ParkingLot[] @relation("UserParkingLots")
  subscriptions Subscription[]
  vehicles     Vehicle[]

  UserParkingLotAccess UserParkingLotAccess[]

  EntryExit EntryExit[]

  PaymentOrder PaymentOrder[]

  AuditLog AuditLog[]
}

model ParkingLot {
  id          Int      @id @default(autoincrement())
  name        String
  location    String
  ownerId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner   User      @relation("UserParkingLots", fields: [ownerId], references: [id])
  spaces  Space[]
  rates   Rate[]
  entries EntryExit[]

  UserParkingLotAccess UserParkingLotAccess[]
}

model UserParkingLotAccess {
  id            Int @id @default(autoincrement())
  userId        Int
  parkingLotId  Int

  user         User        @relation(fields: [userId], references: [id])
  parkingLot   ParkingLot  @relation(fields: [parkingLotId], references: [id])
}


model Space {
  id            Int       @id @default(autoincrement())
  type          VehicleType
  isOccupied    Boolean   @default(false)
  parkingLotId  Int

  parkingLot ParkingLot @relation(fields: [parkingLotId], references: [id])
}

model Vehicle {
  id          Int       @id @default(autoincrement())
  plate       String    @unique
  type        VehicleType
  userId      Int
  createdAt   DateTime @default(now())
  entries     EntryExit[]

  user User @relation(fields: [userId], references: [id])
}

model EntryExit {
  id            Int       @id @default(autoincrement())
  vehicleId     Int
  parkingLotId  Int
  registeredBy  Int
  entryTime     DateTime  @default(now())
  exitTime      DateTime?
  totalToPay    Float?
  discount      Float     @default(0)

  vehicle     Vehicle   @relation(fields: [vehicleId], references: [id])
  parkingLot  ParkingLot @relation(fields: [parkingLotId], references: [id])
  registeredByUser User      @relation(fields: [registeredBy], references: [id])
}

model Rate {
  id           Int       @id @default(autoincrement())
  vehicleType  VehicleType
  pricePerHour Float
  parkingLotId Int

  parkingLot ParkingLot @relation(fields: [parkingLotId], references: [id])
}

model Subscription {
  id           Int       @id @default(autoincrement())
  userId       Int
  type         SubscriptionType
  startDate    DateTime
  endDate      DateTime

  user User @relation(fields: [userId], references: [id])
}

model PaymentOrder {
  id            Int       @id @default(autoincrement())
  userId        Int
  reference     String    @unique
  subscriptionType SubscriptionType
  amount        Int       // en pesos
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int?
  action    String
  entity    String?
  entityId  Int?
  metadata  Json?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  OWNER
  EMPLOYEE
}

enum VehicleType {
  AUTOMOBILE
  MOTORCYCLE
  BICYCLE
  TRUCK
  VAN
  SCOOTER
}

enum SubscriptionType {
  MONTHLY
  QUARTERLY
  SEMIANNUAL
  ANNUAL
}

enum PaymentStatus {
  PENDING
  APPROVED
  DECLINED
  FAILED
}
